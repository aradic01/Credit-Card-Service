openapi: 3.0.3
info:
  title: RBA Assignment API Specification
  description: |-
    OpenAPI 3 specification for RBA Assignment Project
  contact:
    email: aradic97.AR@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /auth/login:
    post:
      tags:
        - Login
      description: 'Login to the app'
      operationId: 'login'
      security: []
      requestBody:
        description: 'User credentials'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        '200':
          description: 'Successful login operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: 'Unauthorized'
  /auth/register:
    post:
      tags:
        - Register
      description: 'App registration'
      operationId: 'register'
      security: []
      requestBody:
        description: 'User registration info'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '201':
          description: 'Successful registration'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: 'Bad request'

  /person:
    put:
      tags:
        - Person
      description: 'Create a new person'
      operationId: 'createPerson'
      requestBody:
        description: 'Person body'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '201':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: 'Invalid request'
        '409':
          description: 'Person with provided OIB already exists'
    patch:
      tags:
        - Person
      description: 'Update a person'
      operationId: 'updatePerson'
      requestBody:
        description: 'Person body'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: 'Invalid request'
        '404':
          description: 'Person not found'
  /person/{personOib}:
    get:
      tags:
        - Person
      description: 'Get Person by OIB'
      operationId: 'getPersonByOib'
      parameters:
        - name: 'personOib'
          in: path
          description: 'OIB of Person to get'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: 'Person not found'
    delete:
      tags:
        - Person
      description: 'Delete Person by OIB'
      operationId: 'deletePersonByOib'
      parameters:
        - name: 'personOib'
          in: path
          description: 'OIB of Person to delete'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful operation'
        '404':
          description: 'Person not found'
  /file/{personOib}:
    get:
      tags:
        - File
      description: 'Generate card template by OIB'
      operationId: 'generateCardTemplateByOib'
      parameters:
        - name: 'personOib'
          in: path
          description: 'OIB of Person for which the card template is generated'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: 'Invalid request'
        '404':
          description: 'Person not found'
        '500':
          description: 'Internal server error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      required:
        - firstName
        - lastName
        - email
        - username
        - password
        - role
      type: object
      properties:
        firstName:
          type: string
          example: 'Johnny'
        lastName:
          type: string
          example: 'Doe'
        email:
          type: string
          format: email
          example: 'johnny@email.com'
        username:
          type: string
          example: 'johnny123'
        password:
          type: string
          format: password
        role:
          type: string
          enum:
            - user
            - admin
            - manager
    AuthRequest:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: 'johndoe23'
        password:
          type: string
          format: password
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    Person:
      required:
        - firstName
        - lastName
        - oib
        - status
      type: object
      properties:
        oib:
          type: string
          example: '03156791677'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        status:
          type: string
          enum:
            - client
            - non-client
security:
  - bearerAuth: []